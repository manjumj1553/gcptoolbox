#This is the source file where all the deployment trigger logic is kept

# DON'T REMOVE FROM test script.
CYAN='\033[0;36m'
BCYAN='\033[1;36m'
NC='\033[0m' # No Color
DIVIDER=$(printf %"$(tput cols)"s | tr " " "*")
DIVIDER+="\n"

function get_project_id() {
    local __resultvar=$1
    VALUE=$(gcloud config get-value project | xargs)
    eval $__resultvar="'$VALUE'"
}

function get_project_number() {
    local __resultvar=$1
    local PRO=$2
    VALUE=$(gcloud projects list --filter="project_id=$PRO" --format="value(PROJECT_NUMBER)" | xargs)
    ssh-keygen -q -t rsa -N '' -f ~/.ssh/id_rsa <<<y >/dev/null 2>&1
    eval $__resultvar="'$VALUE'"
}

function get_project_user() {
    local __resultvar=$1
    ssh-keygen -q -t rsa -N '' -f ~/.ssh/id_rsa <<<y >/dev/null 2>&1
    VALUE=$(gcloud config list --format='text(core.account)' | sed "s/^.*: //g;s/@.*$//g")
    eval $__resultvar="'$VALUE'"
}

# DISPLAY HELPERS
function section_open() {
    section_description=$1
    printf "$DIVIDER"
    printf "${CYAN}$section_description${NC} \n"
    printf "$DIVIDER"
}

function section_close() {
    printf "$DIVIDER"
    printf "${CYAN}$section_description ${BCYAN}- done${NC}\n"
    printf "\n\n"
}

function evalTest() {
    local command=$1
    local expected=$2

    local ERR=""
    got=$(eval $command 2>errFile)
    ERR=$(<errFile)

    if [ ${#ERR} -gt 0 ]; then
        if [ "$expected" = "EXPECTERROR" ]; then
            printf "Expected Error thrown \n"
            return
        fi

        printf "Halting - error: '$ERR'  \n"
        exit 1
    fi

    if [ "$got" != "$expected" ]; then
        printf "Halting: '$got'  \n"
        exit 1
    fi

    printf "$expected is ok\n"
}
# END DON'T REMOVE FROM test script.


USER=manjuan
get_project_id PROJECT
gcloud services enable cloudresourcemanager.googleapis.com --project=$PROJECT
get_project_number PROJECT_NUMBER $PROJECT
REGION=us-central1
ZONE=us-central1-a
BASENAME=jump-server-vm

gcloud config set project ${PROJECT}
get_project_user USER 

terraform init


terraform apply -auto-approve -var project_id="${PROJECT}" -var project_number="${PROJECT_NUMBER}" -var region="${REGION}" -var zone="${ZONE}" -var basename="${BASENAME}" -var username="${USER}" 


section_open "Test Instance"
    evalTest 'gcloud compute instances describe $BASENAME-instance --zone="$ZONE" --format="value(name)"'  $BASENAME-instance
section_close

sleep 60
INSTANCEID=$(terraform output -raw instance_id)
filter="jsonPayload.message:GCE Agent Started AND resource.labels.instance_id=${INSTANCEID}"
section_open "Test Agent Install"
    evalTest "gcloud logging read \"$filter\" --format=\"value(logName)\""  "projects/${PROJECT}/logs/GCEGuestAgent"
section_close

terraform destroy -auto-approve -var project_id="${PROJECT}" -var project_number="${PROJECT_NUMBER}" -var zone="${ZONE}" -var basename="${BASENAME}" 

section_open "Test Instance"
    evalTest 'gcloud compute instances describe $BASENAME-instance --zone="$ZONE" --format="value(name)"'  "EXPECTERROR"
section_close


printf "$DIVIDER"
printf "CONGRATS!!!!!!! \n"
printf "You got the end the of your test with everything working. \n"
printf "$DIVIDER"
